h1. Fast GPIO Arduino Libary

Version: 1.0.0
Release date: 2014-12-01
"www.pololu.com":http://www.pololu.com/

h2. Summary

This is a C++ library for the Arduino IDE that allows you to manipulate general-purpose I/O (GPIO) pins on your Arduino or Arduino-compatible board with minimal overhead.  Many function calls to this library will be inlined and compiled down to just one or two assembly instructions.

This library is intended to be a replacement for the default Arduino I/O functions (@pinMode@, @digitalWrite@, and @digitalRead@) and has several advantages over them:

* The compiled code runs faster.
* Operates only on the specific bits used by the pin instead of doing read-write-modify operations on entire registers.
* Never disables interrupts.
* Supports reading and restoring the state of a pin, which is useful if the pin is used for multiple purposes.
* Pins can be specified either by their AVR pin name or their Arduino pin name.
* Supports pins PD5 and PE2 on the ATmega32U4; these pins do not have an official Arduino pin number so they cannot be used with the default Arduino I/O functions.

Currently, this library requires that the pin number you specify must be known at compile time.  This means the pin number cannot come from a variable that might change and it cannot be the result of a complicated calculation.  This allows the compiler to generate optimal code for manipulating that pin.  For situations where the pin number is not known at compile time, you might prefer to use the default Arduino I/O functions.

The Arduino GPIO functions automatically turn off a pin's PWM function when accessing it with @digitalRead@ or @digitalWrite@.  This library does not have that feature.

h2. Speed test

We compiled the following code with the Arduino IDE 1.5.8 and ran it on an ATmega32U4 running at 16 MHz:

```
#include <FastGPIO.h>
#include <avr/delay.h>

void setup() {
  FastGPIO::Pin<A1>::setOutputLow();
}

void loop() {
  FastGPIO::Pin<A1>::setOutputValueHigh();
  FastGPIO::Pin<A1>::setOutputValueLow();
  _delay_us(10);
  digitalWrite(A1, HIGH);
  digitalWrite(A1, LOW);
  _delay_us(10);
}
```

The pulses generated by the FastGPIO calls were 0.125&nbsp;&mu;s long because each call was compiled to just a single assembly instruction, while the pulses generated by @digitalWrite@ were 5.1&nbsp;&mu;s long.

h2. Supported platforms

This library is designed to work with the Arduino IDE versions 1.0.x and 1.5.x, and will probably not work with earlier versions.

This library currently supports any board based on the ATmega32U4 or ATmega328P.